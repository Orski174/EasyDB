1. Find the top 3 products with the highest sales in the last 6 months, including their supplier details.

SELECT 
    p.product_name, 
    s.supplier_name, 
    SUM(o.quantity * o.unit_price) AS total_sales
FROM 
    Orders o
JOIN 
    Products p ON o.product_id = p.product_id
JOIN 
    Suppliers s ON p.supplier_id = s.supplier_id
WHERE 
    o.order_date >= NOW() - INTERVAL '6 months'
GROUP BY 
    p.product_name, s.supplier_name
ORDER BY 
    total_sales DESC
LIMIT 3;




2. List the names of employees who operate more than one type of machine.

SELECT 
    e.employee_name, 
    COUNT(DISTINCT m.machine_type) AS machine_count
FROM 
    Employees e
JOIN 
    Machine_Operation mo ON e.employee_id = mo.employee_id
JOIN 
    Machines m ON mo.machine_id = m.machine_id
GROUP BY 
    e.employee_name
HAVING 
    COUNT(DISTINCT m.machine_type) > 1;




3. Identify departments with the highest utilization of raw materials over the last year.

SELECT 
    d.department_name, 
    SUM(rm.quantity_used) AS total_material_used
FROM 
    Departments d
JOIN 
    Production_Records pr ON d.department_id = pr.department_id
JOIN 
    Raw_Material_Usage rm ON pr.production_id = rm.production_id
WHERE 
    pr.production_date >= NOW() - INTERVAL '1 year'
GROUP BY 
    d.department_name
ORDER BY 
    total_material_used DESC
LIMIT 1;



4. Retrieve the names and details of employees who worked on orders with at least 3 different products.

SELECT 
    e.employee_id, 
    e.employee_name, 
    COUNT(DISTINCT o.product_id) AS product_count
FROM 
    Employees e
JOIN 
    Order_Assignments oa ON e.employee_id = oa.employee_id
JOIN 
    Orders o ON oa.order_id = o.order_id
GROUP BY 
    e.employee_id, e.employee_name
HAVING 
    COUNT(DISTINCT o.product_id) >= 3;



5. Find warehouses storing the most expensive product and its details.

WITH ProductPrice AS (
    SELECT 
        product_id, 
        MAX(price) AS max_price
    FROM 
        Products
)
SELECT 
    w.warehouse_name, 
    p.product_name, 
    pp.max_price
FROM 
    Warehouses w
JOIN 
    Inventory i ON w.warehouse_id = i.warehouse_id
JOIN 
    Products p ON i.product_id = p.product_id
JOIN 
    ProductPrice pp ON p.product_id = pp.product_id
ORDER BY 
    pp.max_price DESC;



6. Detect suppliers whose products contribute to at least 25% of the total orders in the factory.

WITH TotalOrders AS (
    SELECT 
        SUM(quantity) AS total_quantity
    FROM 
        Orders
),
SupplierOrders AS (
    SELECT 
        s.supplier_id, 
        s.supplier_name, 
        SUM(o.quantity) AS supplier_quantity
    FROM 
        Suppliers s
    JOIN 
        Products p ON s.supplier_id = p.supplier_id
    JOIN 
        Orders o ON p.product_id = o.product_id
    GROUP BY 
        s.supplier_id, s.supplier_name
)
SELECT 
    so.supplier_name, 
    so.supplier_quantity, 
    ROUND((so.supplier_quantity::DECIMAL / to.total_quantity) * 100, 2) AS percentage
FROM 
    SupplierOrders so, TotalOrders to
WHERE 
    (so.supplier_quantity::DECIMAL / to.total_quantity) >= 0.25;



7. Find the machines that have operated for the longest cumulative hours, grouped by department.

SELECT 
    d.department_name, 
    m.machine_name, 
    SUM(op.operation_hours) AS total_hours
FROM 
    Machines m
JOIN 
    Machine_Operation op ON m.machine_id = op.machine_id
JOIN 
    Departments d ON m.department_id = d.department_id
GROUP BY 
    d.department_name, m.machine_name
ORDER BY 
    d.department_name, total_hours DESC;




8. Find pairs of products frequently ordered together (at least 5 times).

SELECT 
    o1.product_id AS product1, 
    o2.product_id AS product2, 
    COUNT(*) AS frequency
FROM 
    Orders o1
JOIN 
    Orders o2 ON o1.order_id = o2.order_id AND o1.product_id < o2.product_id
GROUP BY 
    o1.product_id, o2.product_id
HAVING 
    COUNT(*) >= 5
ORDER BY 
    frequency DESC;